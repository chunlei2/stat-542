prices = asset.paths(S[1], r, sigma[1], N, periods = Time)
head(prices)
future.payoff = pmax(0, prices - X)
discounted.payoff = future.payoff * exp(-r * Time)
install.packages('fExoticOptions')
library(fExoticOptions)
1/(pi + 1)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(9701)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(reshape2)
ratings = read.csv('ratings.dat', sep = ':',
colClasses = c('integer', 'NULL'), header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
dim(ratings)
# movies data
# In movies.dat, some movie names contain single colon (:), so the above
# method does not work.
movies = readLines('movies.dat')
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Genres = ifelse(grepl('\\|', movies$Genres), "Multiple",
movies$Genres)
rating_merged = merge(x = ratings, y = movies, by.x = "MovieID")
ggplot(rating_merged, aes(x = factor(Genres), y = Rating),
color = factor(vs)) + stat_summary(fun.y = mean, position =
position_dodge(), geom = "bar") + labs(x = "Genres", y = "Mean
ratings", title = "Mean ratings by genres") + theme(axis.text.x =
element_text(angle = 90, hjust = 1))
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.6)
train = ratings[train.id, ]
write.table(train, file = 'train.dat', sep = '::', row.names = FALSE,
col.names = FALSE
)
test = ratings[- train.id, ]
test.id = sample(nrow(test), floor(nrow(test)) * 0.5)
test = test[test.id, ]
test$Timestamp = NULL
test$ID = 1:nrow(test)
label = test[c('ID', 'Rating')]
test$Rating = NULL
test = test[c('ID', 'UserID', 'MovieID')]
colnames(test) = c('ID', 'user', 'movie')
write.table(test, file = 'test.csv', sep = ',', row.names = FALSE)
write.table(label, file = 'label.csv', sep = ',', row.names = FALSE)
# remove timestamp column
train$Timestamp = NULL
head(train)
R = acast(train, UserID ~ MovieID)
R = as(R, 'realRatingMatrix')
R_m = normalize(R)
head(getRatingMatrix(R_m))
recommenderRegistry$get_entries(dataType = "realRatingMatrix")
rec = Recommender(R, method = 'UBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', nn = 5)
)
head(R)
head(getRatingMatrix(R))
head(test)
head(train)
head(test)
#load libraries
rm(list = ls())
set.seed(9701)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(reshape2)
#Split ratings
ratings = read.csv('ratings.dat', sep = ':',
colClasses = c('integer', 'NULL'), header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.6)
train = ratings[train.id, ]
test = ratings[- train.id, ]
test.id = sample(nrow(test), floor(nrow(test)) * 0.5)
test = test[test.id, ]
test$Timestamp = NULL
test$ID = 1:nrow(test)
label = test[c('ID', 'Rating')]
test$Rating = NULL
test = test[c('ID', 'UserID', 'MovieID')]
colnames(test) = c('ID', 'user', 'movie')
write.table(label, file = 'label.csv', sep = ',', row.names = FALSE)
# remove timestamp column
train$Timestamp = NULL
head(test)
#load libraries
rm(list = ls())
set.seed(9701)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(reshape2)
#Split ratings
ratings = read.csv('ratings.dat', sep = ':',
colClasses = c('integer', 'NULL'), header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.6)
train = ratings[train.id, ]
test = ratings[- train.id, ]
test.id = sample(nrow(test), floor(nrow(test)) * 0.5)
test = test[test.id, ]
test$Timestamp = NULL
test$ID = 1:nrow(test)
label = test[c('ID', 'Rating')]
test$Rating = NULL
test = test[c('ID', 'UserID', 'MovieID')]
colnames(test) = c('ID', 'user', 'movie')
write.table(label, file = 'label.csv', sep = ',', row.names = FALSE)
# remove timestamp column
train$Timestamp = NULL
#Method 1, UBCF
R = acast(train, UserID ~ MovieID)
R = as(R, 'realRatingMatrix')
rec = Recommender(R, method = 'UBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', nn = 5)
)
recom = predict(rec, R, type = 'ratings')
test$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# 2.5 may be too arbitrary
test$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
rec_list = as(recom, 'list')
rec_list = as(recom, 'list')
test$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# 2.5 may be too arbitrary
test$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
#Method 1 error
y = read.csv('label.csv', header = T)
res = merge(test, y, by.x = 'ID')
rmse = mean((res$Rating - res$rating)^2)
rmse
write.table(test, 'method1_test.txt', sep = ',')
head(test)
a = read.table('method1_test.txt', sep = ',')
head(a)
recommenderRegistry$get_entries()
head(test)
#Method 2,IBCF
rec = Recommender(R, method = 'IBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', k = 5)
)
recom = predict(rec, R, type = 'ratings')
rec_list = as(recom, 'list')
test$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# 2.5 may be too arbitrary
test$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
write.table(test, 'method2_test.txt', sep = ',')
```{r}
#Method 2 error
y = read.csv('label.csv', header = T)
res = merge(test, y, by.x = 'ID')
rmse = mean((res$Rating - res$rating)^2)
rmse
dim(recom)
recommenderRegistry$get_entries()
#Method 2,IBCF
rec = Recommender(R, method = 'IBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', k = 20)
)
recom = predict(rec, R, type = 'ratings')
rec_list = as(recom, 'list')
test$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# 2.5 may be too arbitrary
test$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
write.table(test, 'method2_test.txt', sep = ',')
attr(, 'recommenderlab')
#Method 2 error
y = read.csv('label.csv', header = T)
res = merge(test, y, by.x = 'ID')
rmse = mean((res$Rating - res$rating)^2)
rmse
dim(recom)
recom
getRatingMatrix(recom)
#load libraries
rm(list = ls())
set.seed(9701)
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(reshape2)
#Split ratings
ratings = read.csv('ratings.dat', sep = ':',
colClasses = c('integer', 'NULL'), header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.6)
train = ratings[train.id, ]
test = ratings[- train.id, ]
test.id = sample(nrow(test), floor(nrow(test)) * 0.5)
test = test[test.id, ]
test$Timestamp = NULL
test$ID = 1:nrow(test)
label = test[c('ID', 'Rating')]
test$Rating = NULL
test = test[c('ID', 'UserID', 'MovieID')]
colnames(test) = c('ID', 'user', 'movie')
write.table(label, file = 'label.csv', sep = ',', row.names = FALSE)
# remove timestamp column
train$Timestamp = NULL
#Method 1, UBCF
R = acast(train, UserID ~ MovieID)
R = as(R, 'realRatingMatrix')
rec = Recommender(R, method = 'UBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', nn = 5)
)
recom = predict(rec, R, type = 'ratings')
#Method 1, UBCF
R = acast(train, UserID ~ MovieID)
R = as(R, 'realRatingMatrix')
rec = Recommender(R, method = 'UBCF',
parameter = list(normalize = 'Z-score', method = 'Cosine', nn = 3)
)
recom = predict(rec, R, type = 'ratings')
rec_list = as(recom, 'list')
test$rating = NA
for (u in 1:nrow(test)){
# Read userid and movieid from columns 2 and 3 of test data
userid = as.character(test$user[u])
movieid = as.character(test$movie[u])
rating = rec_list[[userid]][movieid]
# 2.5 may be too arbitrary
test$rating[u] = ifelse(is.na(rating), 2.5, rating)
}
write.table(test, 'method1_test.txt', sep = ',')
dim(recom)
getRatingMatrix(recom)
sum(is.na(recom))
rec_matrix = as(recom, 'matrix')
sum(is.na(rec_matrix))
dim(rec_matrix)
6040*3624
rm(list = ls())
library(quantmod)
library(MASS)
library(fOptions)
library(fExoticOptions)
filenames <- Sys.glob("*.csv")
mydata = list()
for (i in 1:length(filenames)) {
mydata[[i]] = read.csv(filenames[i])
}
n_stocks = length(mydata) #number of stocks
length_stock = dim(mydata[[1]])[1] #The time length
log_returns = matrix(0, n_stocks, length_stock)
for (i in 1:n_stocks) {
log_returns[i, ] = Delt(mydata[[i]][, 2], type = 'log')[,1]
}
# get rid of the first column which is always na, 2*2994
log_returns = log_returns[, -1] #The ith, jth element is the jth return of the ith stock, ie. log(S_j/S_(j-1))
asset.paths <- function(s0, #the last day of the price
mu,
sigma,
nsims = 10000,
periods = 0:10   # time periods at which to simulate prices
)
{
s0 = as.vector(s0)
nsteps = length(periods)
dt = c(periods[1], diff(periods))
#One asset case
if( length(s0) == 1 ) {
drift = mu - 0.5 * sigma^2 #ie alpha in lemma
#period = 1
if( nsteps == 1 ) {
s0 * exp(drift * dt + sigma * sqrt(dt) * rnorm(nsims)) #S_0
} else { #period >1, if nsteps = 2, dt = c(0, 1)
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims) #2*10000, temp[1,1]:S_0/S_0, temp[2,1]:S_1/S_0
for(i in 2:nsteps) temp[i,] = temp[i,] * temp[(i-1),]
#temp[1,1]:S_0/S_0, temp[2,1]:S_1/S_0, if exists temp[3,1]:S_2/S_0
s0 * temp #temp[1,1]:S_0, temp[2,1]:S_1, temp[3, 1]:S_2
}
} else { #multi assets case
drift = mu - 0.5 * diag(sigma) #nstocks
n = length(mu) #nstocks
#period = 1
if( nsteps == 1 ) {
s0 * exp(drift * dt + sqrt(dt) * t(mvrnorm(nsims, rep(0, n), sigma)))
} else { #period >1
temp = array(exp(as.vector(drift %*% t(dt)) + #nstocks, period+1
t(sqrt(dt) * mvrnorm(nsteps * nsims, rep(0, n), sigma))), #
c(n, nsteps, nsims))
for(i in 2:nsteps) temp[,i,] = temp[,i,] * temp[,(i-1),] #temp[i,j,k] is the ith stock, jth period, kth simulation
s0 * temp
}
}
}
set.seed(1)
one_log_return = log_returns[1, ]
alpha = mean(one_log_return)
sigma_square = var(one_log_return)
mu = alpha + 0.5*sigma_square
S = mydata[[1]][length_stock, 2]
mu = mu
sigma = sqrt(sigma_square)
N = 10000
# Single Asset for 10 days
periods = 0:10
prices = asset.paths(S, mu, sigma, N, periods = periods)
# plot 100 simulations
matplot(prices[,1:100], type='l', xlab='Days', ylab='Prices',
main='Selected Price Paths')
set.seed(1)
alpha = rowMeans(log_returns) #nstocks
sigma_square = cov(t(log_returns))#nstocks, nstocks
mu = alpha + 0.5*diag(sigma_square)#nstocks
S = c() #the last day price
N = 10000
for (i in 1:n_stocks) {
S = c(S, mydata[[i]][length_stock, 2])
}
periods = 0:10
prices = asset.paths(S, mu, sigma_square, N, periods = periods) #[n, nsteps, nsims]
# plot
matplot(prices[1,,1:100], type='l', xlab='Years', ylab='Prices',
main='Selected Price Paths for Asset 1')
matplot(prices[2,,1:100], type='l', xlab='Years', ylab='Prices',
main='Selected Price Paths for Asset 2')
mydata[[1]]
S[1]
S
tail(mydata[[1]])
alpha = mean(one_log_return)
mu = alpha + 0.5*sigma_square
mu[1]
S[1]
set.seed(1)
# Price European Call Option
r = 0.05 #the annualized rate of interest
Time = 0.5 #the time to maturity measured in years, a numeric value
periods = 0:round(0.5*365)
X = 1010
one_log_return = log_returns[1, ]
alpha = mean(one_log_return)
mu = alpha + 0.5*sigma_square
sigma_square = var(one_log_return)
sigma = sqrt(sigma_square)
# Black–Scholes option pricing model
GBSOption(TypeFlag = "c", #a character string either "c" for a call option or a "p" for a put option
S = S[1], #the asset price
X = X, #the exercise price
Time = Time,#the time to maturity measured in years
r = r, #the annualized rate of interest
b = r, #the annualized cost-of-carry rate
sigma = sigma #the annualized volatility of the underlying security
)
# Monte Carlo simulation
N = 1000000
prices = asset.paths(S[1], mu[1], sigma, N, periods = periods)
set.seed(1)
# Price European Call Option
r = 0.05 #the annualized rate of interest
Time = 0.5 #the time to maturity measured in years, a numeric value
periods = 0:round(0.5*365)
X = 1010
one_log_return = log_returns[1, ]
alpha = mean(one_log_return)
mu = alpha + 0.5*sigma_square
sigma_square = var(one_log_return)
sigma = sqrt(sigma_square)
# Black–Scholes option pricing model
GBSOption(TypeFlag = "c", #a character string either "c" for a call option or a "p" for a put option
S = S[1], #the asset price
X = X, #the exercise price
Time = Time,#the time to maturity measured in years
r = r, #the annualized rate of interest
b = r, #the annualized cost-of-carry rate
sigma = sigma #the annualized volatility of the underlying security
)
# Monte Carlo simulation
N = 1000
prices = asset.paths(S[1], mu[1], sigma, N, periods = periods)
future.payoff = pmax(0, prices - X)
discounted.payoff = future.payoff * exp(-r * Time)
# option price
mean(discounted.payoff)
set.seed(1)
# Price European Call Option
r = 0.10 #the annualized rate of interest
Time = 0.5 #the time to maturity measured in years, a numeric value
periods = 0:round(0.5*365)
X = 1010
one_log_return = log_returns[1, ]
alpha = mean(one_log_return)
mu = alpha + 0.5*sigma_square
sigma_square = var(one_log_return)
sigma = sqrt(sigma_square)
# Black–Scholes option pricing model
GBSOption(TypeFlag = "c", #a character string either "c" for a call option or a "p" for a put option
S = S[1], #the asset price
X = X, #the exercise price
Time = Time,#the time to maturity measured in years
r = r, #the annualized rate of interest
b = r, #the annualized cost-of-carry rate
sigma = sigma #the annualized volatility of the underlying security
)
# Monte Carlo simulation
N = 1000
prices = asset.paths(S[1], mu[1], sigma, N, periods = periods)
future.payoff = pmax(0, prices - X)
discounted.payoff = future.payoff * exp(-r * Time)
# option price
mean(discounted.payoff)
set.seed(1)
# Price European Call Option
r = 0.5 #the annualized rate of interest
Time = 0.5 #the time to maturity measured in years, a numeric value
periods = 0:round(0.5*365)
X = 1010
one_log_return = log_returns[1, ]
alpha = mean(one_log_return)
mu = alpha + 0.5*sigma_square
sigma_square = var(one_log_return)
sigma = sqrt(sigma_square)
# Black–Scholes option pricing model
GBSOption(TypeFlag = "c", #a character string either "c" for a call option or a "p" for a put option
S = S[1], #the asset price
X = X, #the exercise price
Time = Time,#the time to maturity measured in years
r = r, #the annualized rate of interest
b = r, #the annualized cost-of-carry rate
sigma = sigma #the annualized volatility of the underlying security
)
# Monte Carlo simulation
N = 1000
prices = asset.paths(S[1], mu[1], sigma, N, periods = periods)
future.payoff = pmax(0, prices - X)
discounted.payoff = future.payoff * exp(-r * Time)
# option price
mean(discounted.payoff)
#*****************************************************************
# Price Asian Call Option
#******************************************************************
load.packages('fExoticOptions')
library(fExoticOptions)
S = c(100,105)
X = 98
Time = 0.5
r = 0.05
sigma = c(0.11,0.16)
rho = 0.63
N = 10000
# Single Asset for 10 years
periods = 0:10
drift =0.1
sigma = sigma[1]
nsteps = 10
nsims = 1000
dt = c(periods[1], diff(periods))
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
S = c(100,105)
X = 98
Time = 0.5
r = 0.05
sigma = c(0.11,0.16)
rho = 0.63
N = 10000
# Single Asset for 10 years
periods = 0:10
drift =0.1
sigma = sigma[1]
nsteps = 11
nsims = 1000
dt = c(periods[1], diff(periods))
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
S = c(100,105)
X = 98
Time = 0.5
r = 0.05
sigma = c(0.11,0.16)
rho = 0.63
N = 10000
# Single Asset for 10 years
periods = 0:10
drift =0.1
sigma = sigma[1]
nsteps = 11
nsims = 10
dt = c(periods[1], diff(periods))
temp = matrix(exp(drift * dt + sigma * sqrt(dt) * rnorm(nsteps * nsims)), nc=nsims)
temp
